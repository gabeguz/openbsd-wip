$OpenBSD$
_X is likely to be a macro coming from some other place.
--- Eigen/src/SparseLU/SparseLU.h.orig	Thu Oct 24 14:28:38 2013
+++ Eigen/src/SparseLU/SparseLU.h	Thu Oct 24 14:28:50 2013
@@ -219,9 +219,9 @@ class SparseLU : public internal::SparseLUImpl<typenam
     }
 
     template<typename Rhs, typename Dest>
-    bool _solve(const MatrixBase<Rhs> &B, MatrixBase<Dest> &_X) const
+    bool _solve(const MatrixBase<Rhs> &B, MatrixBase<Dest> &_XX) const
     {
-      Dest& X(_X.derived());
+      Dest& X(_XX.derived());
       eigen_assert(m_factorizationIsOk && "The matrix should be factorized first");
       EIGEN_STATIC_ASSERT((Dest::Flags&RowMajorBit)==0,
                         THIS_METHOD_IS_ONLY_FOR_COLUMN_MAJOR_MATRICES);
