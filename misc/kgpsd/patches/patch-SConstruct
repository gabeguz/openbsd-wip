--- SConstruct.orig	Tue Jul  3 02:48:16 2012
+++ SConstruct	Thu Jan 17 08:47:49 2013
@@ -360,7 +360,7 @@ def CheckExecutable(context, testprogram, check_for):
     return ret
 
 # Stylesheet URLs for making HTML and man pages from DocBook XML.
-docbook_url_stem = 'http://docbook.sourceforge.net/release/xsl/current/'
+docbook_url_stem = '/usr/local/share/xsl/docbook/'
 docbook_man_uri = docbook_url_stem + 'manpages/docbook.xsl'
 docbook_html_uri = docbook_url_stem + 'html/docbook.xsl'
 
@@ -459,7 +459,7 @@ if env['ncurses']:
     elif sys.platform.startswith('freebsd'):
         ncurseslibs= [ '-lncurses' ]
     elif sys.platform.startswith('openbsd'):
-        ncurseslibs= [ '-lcurses' ]
+        ncurseslibs= [ '-lncurses' ]
 
 if env['usb']:
     # In FreeBSD except version 7, USB libraries are in the base system
@@ -587,7 +587,7 @@ confdefs.append('''
 #ifdef __LITTLE_ENDIAN__
 #undef WORDS_BIGENDIAN
 #else
-#include <endian.h>
+#include <sys/endian.h>
 #if __BYTE_ORDER == __BIG_ENDIAN
 #define WORDS_BIGENDIAN 1
 #elif __BYTE_ORDER == __LITTLE_ENDIAN
@@ -747,9 +747,8 @@ def VersionedSharedLibrary(env, libname, version, lib_
     shlink_flags = SCons.Util.CLVar(env.subst('$SHLINKFLAGS'))
 
     if platform == 'posix':
-        ilib_suffix = shlib_suffix + '.' + version
-        (major, age, revision) = version.split(".")
-        soname = "lib" + libname + shlib_suffix + "." + major
+        ilib_suffix = shlib_suffix + '.' + '${LIBgps_VERSION}'
+        soname = "lib" + libname + shlib_suffix + "." + "${LIBgps_VERSION}"
         shlink_flags += [ '-Wl,-Bsymbolic', '-Wl,-soname=%s' % soname ]
     elif platform == 'cygwin':
         ilib_suffix = shlib_suffix
@@ -784,7 +783,7 @@ def VersionedSharedLibrary(env, libname, version, lib_
         # For libfoo.so.x.y.z, links libfoo.so libfoo.so.x.y libfoo.so.x
         major_name = shlib_suffix + "." + lib.split(".")[2]
         minor_name = major_name + "." + lib.split(".")[3]
-        for linksuffix in [shlib_suffix, major_name, minor_name]:
+        for linksuffix in [shlib_suffix + "${LIBgps_VERSION}"]:
             linkname = re.sub(suffix_re, linksuffix, lib)
             env.AddPostAction(ilib, 'rm -f %s; ln -s %s %s' % (
                 linkname, lib, linkname))
@@ -799,7 +798,7 @@ def VersionedSharedLibraryInstall(env, destination, li
     if platform == 'posix':
         suffix_re = '%s\\.[0-9\\.]*$' % re.escape(shlib_suffix)
         for lib in map(str, libs):
-            if lib.count(".") != 4:
+            if lib.count(".") != 3:
                 # We need a library name in libfoo.so.x.y.z form to proceed
                 raise ValueError
             # For libfoo.so.x.y.z, links libfoo.so libfoo.so.x.y libfoo.so.x
@@ -807,7 +806,8 @@ def VersionedSharedLibraryInstall(env, destination, li
             minor_name = major_name + "." + lib.split(".")[3]
             for linksuffix in [shlib_suffix, major_name, minor_name]:
                 linkname = re.sub(suffix_re, linksuffix, lib)
-                env.AddPostAction(ilibs, 'cd %s; rm -f %s; ln -s %s %s' % (destination, linkname, lib, linkname))
+		# XXX disable installation of symlinks
+                #env.AddPostAction(ilibs, 'cd %s; rm -f %s; ln -s %s %s' % (destination, linkname, lib, linkname))
             env.Clean(lib, linkname)
     return ilibs
 
@@ -1015,7 +1015,7 @@ else:
             python_objects[ext].append(
                 python_env.NoCache(
                     python_env.SharedObject(
-                        src.split(".")[0] + '-py_' + '_'.join(['%s' %(x) for x in sys.version_info]) + so_ext, src
+                        src.split(".")[0] + so_ext, src
                     )
                 )
             )
@@ -1159,7 +1159,6 @@ python_manpages = {
     "gpscat.1" : "gpscat.xml",
     "xgpsspeed.1" : "gps.xml",
     "xgps.1" : "gps.xml",
-    "gegps.1" : "gps.xml",
     }
 
 manpage_targets = []
@@ -1214,7 +1213,7 @@ if not env['debug'] and not env['profiling'] and env['
 if not env['python']:
     python_install = []
 else:
-    python_lib_dir = sysconfig.get_python_lib(plat_specific=1)
+    python_lib_dir = sysconfig.get_python_lib(plat_specific=1, prefix = env['prefix'])
     python_module_dir = python_lib_dir + os.sep + 'gps'
     python_extensions_install = python_env.Install( DESTDIR + python_module_dir,
                                                     python_built_extensions)
