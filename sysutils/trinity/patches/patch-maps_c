$OpenBSD$
--- maps.c.orig	Sat Mar  2 17:10:14 2013
+++ maps.c	Sat Mar  2 17:16:05 2013
@@ -1,5 +1,7 @@
 #include <fcntl.h>
+#ifdef __LINUX__
 #include <malloc.h>
+#endif
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -91,7 +93,10 @@ static void * alloc_zero_map(struct map *map, int prot
 	 */
 	size *= 2;
 
+#ifdef __LINUX__
 	tmpmap->ptr = mmap(NULL, size, prot, MAP_ANONYMOUS|MAP_SHARED, -1, 0);
+#endif
+	tmpmap->ptr = mmap(NULL, size, prot, MAP_ANON|MAP_SHARED, -1, 0);
 
 	if (tmpmap->ptr == MAP_FAILED) {
 		printf("mmap /dev/zero failure\n");
@@ -169,25 +174,25 @@ void init_buffers(void)
 
 	output(2, "shm is at %p\n", shm);
 
-	page_zeros = memalign(page_size, page_size * 2);
+	/* FIXME page_zeros = memalign(page_size, page_size * 2); */
 	if (!page_zeros)
 		exit(EXIT_FAILURE);
 	memset(page_zeros, 0, page_size);
 	output(2, "page_zeros @ %p\n", page_zeros);
 
-	page_0xff = memalign(page_size, page_size * 2);
+	/* FIXME page_0xff = memalign(page_size, page_size * 2); */
 	if (!page_0xff)
 		exit(EXIT_FAILURE);
 	memset(page_0xff, 0xff, page_size);
 	output(2, "page_0xff @ %p\n", page_0xff);
 
-	page_rand = memalign(page_size, page_size * 2);
+	/* FIXME page_rand = memalign(page_size, page_size * 2); */
 	if (!page_rand)
 		exit(EXIT_FAILURE);
 	memset(page_rand, 0x55, page_size);	/* overwritten below */
 	output(2, "page_rand @ %p\n", page_rand);
 
-	page_allocs = memalign(page_size, page_size * 2);
+	/* FIXME page_allocs = memalign(page_size, page_size * 2); */
 	if (!page_allocs)
 		exit(EXIT_FAILURE);
 	memset(page_allocs, 0xff, page_size);
