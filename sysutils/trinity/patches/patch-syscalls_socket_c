$OpenBSD$
--- syscalls/socket.c.orig	Sat Mar  2 18:36:07 2013
+++ syscalls/socket.c	Sat Mar  2 19:37:13 2013
@@ -5,15 +5,19 @@
 #include <stdlib.h>
 #include <sys/types.h>
 #include <sys/socket.h>
+#ifdef __LINUX__
 #include <linux/in.h>
 #include <linux/caif/caif_socket.h>
 #include <linux/irda.h>
 #include <linux/dn.h>
+#endif
 
 #include "trinity.h"
 #include "sanitise.h"
 #include "shm.h"
+#ifdef __LINUX__
 #include "compat.h"
+#endif
 
 #define NR_AX25_PROTOS 13
 static int ax25_protocols[NR_AX25_PROTOS] = {
@@ -41,6 +45,7 @@ void sanitise_socket(int childno)
 
 	switch (family) {
 
+#ifdef __LINUX__
 	case AF_APPLETALK:
 		switch (rand() % 2) {
 		case 0:	type = SOCK_DGRAM;
@@ -89,20 +94,30 @@ void sanitise_socket(int childno)
 			type = SOCK_STREAM;
 		}
 		break;
-
+#endif
 	case AF_INET:
 		switch (rand() % 3) {
 		case 0:	type = SOCK_STREAM;	// TCP
 			if ((rand() % 2) == 0)
 				protocol = 0;
 			else
+#ifdef __LINUX__
 				protocol = IPPROTO_TCP;
+#endif
+#ifdef OpenBSD
+				protocol = AF_INET;
+#endif
 			break;
 		case 1:	type = SOCK_DGRAM;	// UDP
 			if ((rand() % 2) == 0)
 				protocol = 0;
 			else
+#ifdef __LINUX__
 				protocol = IPPROTO_UDP;
+#endif
+#ifdef OpenBSD
+				protocol = AF_INET6;
+#endif
 			break;
 		case 2:	type = SOCK_RAW;
 			break;
@@ -120,7 +135,12 @@ void sanitise_socket(int childno)
 			if ((rand() % 2) == 0)
 				protocol = 0;
 			else
+#ifdef __LINUX__
 				protocol = IPPROTO_UDP;
+#endif
+#ifdef OpenBSD
+				protocol = AF_INET6;
+#endif
 			break;
 		case 2:	type = SOCK_RAW;
 			break;
@@ -128,6 +148,7 @@ void sanitise_socket(int childno)
 		}
 		break;
 
+#ifdef __LINUX__
 	case AF_IPX:
 		type = SOCK_DGRAM;
 		break;
@@ -230,6 +251,7 @@ void sanitise_socket(int childno)
 		default: break;
 		}
 		break;
+#endif
 
 	case AF_UNIX:
 		protocol = PF_UNIX;
@@ -244,29 +266,34 @@ void sanitise_socket(int childno)
 		}
 		break;
 
+#ifdef __LINUX__
 	case AF_X25:
 		type = SOCK_SEQPACKET;
 		protocol = 0;
 		break;
-
+#endif
 	default:
 		switch (rand() % 6) {
 		case 0:	type = SOCK_DGRAM;	break;
 		case 1:	type = SOCK_STREAM;	break;
+#ifdef __LINUX__
 		case 2:	type = SOCK_SEQPACKET;	break;
 		case 3:	type = SOCK_RAW;	break;
 		case 4:	type = SOCK_RDM;	break;
 		case 5:	type = SOCK_PACKET;	break;
+#endif
 		default: break;
 		}
 
 		break;
 	}
 
+#ifdef __LINUX__
 	if ((rand() % 100) < 25)
 		type |= SOCK_CLOEXEC;
 	if ((rand() % 100) < 25)
 		type |= SOCK_NONBLOCK;
+#endif
 
 	shm->a1[childno] = family;
 	shm->a2[childno] = type;
