$OpenBSD$
--- syscalls/setsockopt.c.orig	Sat Mar  2 19:37:35 2013
+++ syscalls/setsockopt.c	Sat Mar  2 20:05:08 2013
@@ -7,10 +7,14 @@
 #include <sys/socket.h>
 #include "trinity.h"
 #include "sanitise.h"
+#ifdef __LINUX__
 #include "compat.h"
+#endif
 #include "shm.h"
 #include "syscalls/setsockopt.h"
 
+#ifdef __LINUX__
+
 void sanitise_setsockopt(int childno)
 {
 	int level;
@@ -28,6 +32,7 @@ void sanitise_setsockopt(int childno)
 	case 3:	level = SOL_UDP; break;
 	case 4:	level = SOL_IPV6; break;
 	case 5:	level = SOL_ICMPV6; break;
+#ifdef __LINUX__
 	case 6:	level = SOL_SCTP; break;
 	case 7:	level = SOL_UDPLITE; break;
 	case 8:	level = SOL_RAW; break;
@@ -55,6 +60,7 @@ void sanitise_setsockopt(int childno)
 	case 30: level = SOL_IUCV; break;
 	case 31: level = SOL_CAIF; break;
 	case 32: level = SOL_ALG; break;
+#endif
 	default:
 		level = rand();
 		break;
@@ -119,6 +125,7 @@ void sanitise_setsockopt(int childno)
 		shm->a3[childno] = icmpv6_opts[val];
 		break;
 
+#ifdef __LINUX__
 	case SOL_SCTP:
 		val = rand() % NR_SOL_SCTP_OPTS;
 		shm->a3[childno] = sctp_opts[val];
@@ -245,7 +252,7 @@ void sanitise_setsockopt(int childno)
 		default:
 			break;
 		}
-
+#endif
 		switch (level) {
 		case SOL_HCI:
 			val = rand() % NR_SOL_BLUETOOTH_HCI_OPTS;
@@ -334,3 +341,4 @@ struct syscall syscall_setsockopt = {
 	.sanitise = sanitise_setsockopt,
 	.flags = NEED_ALARM,
 };
+#endif
