$OpenBSD$
--- syscalls/mmap.c.orig	Sat Mar  2 21:02:21 2013
+++ syscalls/mmap.c	Sat Mar  2 21:42:04 2013
@@ -4,15 +4,28 @@
 	unsigned long, fd, unsigned long, off)
  */
 #include <stdlib.h>
+#ifdef __LINUX__
 #include <asm/mman.h>
+#endif
 
+#ifdef OpenBSD
+#include <sys/types.h>
+#include <sys/mman.h>
+#endif
+
 #include "trinity.h"
 #include "sanitise.h"
 #include "shm.h"
 #include "arch.h"
+#ifdef __LINUX__
 #include "compat.h"
+#endif
 
+#ifdef __LINUX__
 #define NUM_FLAGS 12
+#else
+#define NUM_FLAGS 9
+#endif
 
 // need this to actually get MAP_UNINITIALIZED defined
 #define CONFIG_MMAP_ALLOW_UNINITIALIZED
@@ -20,10 +33,33 @@
 void sanitise_mmap(int childno)
 {
 	unsigned int i;
-	unsigned int flagvals[NUM_FLAGS] = { MAP_FIXED, MAP_ANONYMOUS,
-			    MAP_GROWSDOWN, MAP_DENYWRITE, MAP_EXECUTABLE, MAP_LOCKED,
-			    MAP_NORESERVE, MAP_POPULATE, MAP_NONBLOCK, MAP_STACK,
-			    MAP_HUGETLB, MAP_UNINITIALIZED };
+	unsigned int flagvals[NUM_FLAGS] = {
+#ifdef __LINUX__
+					MAP_FIXED,
+					MAP_ANONYMOUS,
+					MAP_GROWSDOWN,
+					MAP_DENYWRITE,
+					MAP_EXECUTABLE,
+					MAP_LOCKED,
+					MAP_NORESERVE,
+					MAP_POPULATE,
+					MAP_NONBLOCK,
+					MAP_STACK,
+					MAP_HUGETLB,
+					MAP_UNINITIALIZED
+#endif
+#ifdef OpenBSD
+					MAP_FIXED,
+					MAP_ANON,
+					MAP_FILE,
+					MAP_HASSEMAPHORE,
+					MAP_INHERIT,
+					MAP_PRIVATE,
+					MAP_SHARED,
+					MAP_TRYFIXED,
+					MAP_COPY
+#endif
+				};
 	unsigned int numflags = rand() % NUM_FLAGS;
 
 	/* Don't actually set a hint right now, in case we give out
@@ -43,17 +79,30 @@ void sanitise_mmap(int childno)
 		shm->a4[childno] |= flagvals[rand() % NUM_FLAGS];
 
 	/* no fd if anonymous mapping. */
+#ifdef __LINUX__
 	if (shm->a4[childno] & MAP_ANONYMOUS)
+#endif
+#ifdef OpenBSD
+	if (shm->a4[childno] & MAP_ANON)
+#endif
 		shm->a5[childno] = -1;
 
 	/* page align non-anonymous mappings. */
+#ifdef __LINUX__
 	if (shm->a4[childno] & MAP_ANONYMOUS)
 		shm->a6[childno] &= PAGE_MASK;
 	else
 		shm->a6[childno] = 0;
-
+#endif
+#ifdef OpenBSD
+	if (shm->a4[childno] & MAP_ANON)
+		shm->a6[childno] &= PAGE_MASK;
+	else
+		shm->a6[childno] = 0;
+#endif
 }
 
+/*
 struct syscall syscall_mmap = {
 	.name = "mmap",
 	.num_args = 6,
@@ -66,13 +115,26 @@ struct syscall syscall_mmap = {
 	.arg3type = ARG_LIST,
 	.arg3list = {
 		.num = 4,
-		.values = { PROT_READ, PROT_WRITE, PROT_EXEC, PROT_SEM },
+		.values = {
+				PROT_READ,
+				PROT_WRITE,
+				PROT_EXEC,
+#ifdef __LINUX__
+				PROT_SEM
+#endif
+#ifdef OpenBSD
+				PROT_NONE
+#endif
+		},
 	},
 	.arg4name = "flags",
 	.arg4type = ARG_OP,
 	.arg4list = {
 		.num = 2,
-		.values = { MAP_SHARED, MAP_PRIVATE },
+		.values = {
+					MAP_SHARED,
+					MAP_PRIVATE
+		},
 	},
 	.arg5name = "fd",
 	.arg5type = ARG_FD,
@@ -81,3 +143,4 @@ struct syscall syscall_mmap = {
 	.group = GROUP_VM,
 	.flags = NEED_ALARM,
 };
+*/
