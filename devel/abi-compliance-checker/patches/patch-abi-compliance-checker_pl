$OpenBSD$
--- abi-compliance-checker.pl.orig	Fri Dec 14 15:24:09 2012
+++ abi-compliance-checker.pl	Wed Jan 16 19:13:21 2013
@@ -1674,6 +1674,206 @@ sub showPos($)
     }
 }
 
+# Implement fork+exec for reading data from the child process in
+# portable way (hello, Windows). Should be used instead of:
+#   open(HANDLE, "-|", ...).
+# Based on code from perlfork manual page.
+#
+# Arguments:
+#   Filehandle to be open for reading.
+#   Working directory (could be undef).
+#   Command line.
+sub openOutput(*$@) {
+    # temporary pipe for provoking SIGPIPE on child input
+    pipe(my $hread, my $htmp) or exitStatus("Error", "can't create pipe: $!");
+    pipe($_[0], my $hwrite) or exitStatus("Error", "can't create pipe: $!");
+    printMsg("DEBUG", "Running program for output: ".join(" ", @_[2..$#_]));
+    my $pid = fork();
+    if(!defined $pid) {
+        exitStatus("Error", "fork failed: $!");
+    }
+
+    if ($pid) {
+        # parent
+        close $hwrite;
+        close $hread;
+        close $htmp;
+        return $pid;
+    }
+
+    # child
+    if (defined $_[1]) {
+        chdir($_[1]) or die "cannot chdir to $_[1]: $!";
+    }
+    close $_[0];
+    close $htmp;
+    open(STDIN,  "<&=" . fileno($hread))  or die "cannot reopen STDIN: $!";
+    close $hread;
+    open(STDOUT, ">&=" . fileno($hwrite)) or die "cannot reopen STDOUT: $!";
+    close $hwrite;
+    
+    exec @_[2..$#_];
+    die "exec failed: $!";
+}
+
+# Arguments:
+#    File handle opened by openOutput().
+#    $Pid returned by openOutput().
+#
+# Returns: exit code of program, $? is set as side-effect.
+sub closeOutput(*$) {
+    waitpid $_[1], 0;
+    close $_[0];
+    return ($? >> 8);
+}
+
+# Simplified version of openOutput() + closeOutput().
+# Returns program output, $? is set as side-effect.
+sub readOutput(@) {
+    my $Pid = openOutput(my $FH, undef, @_);
+    local $/ = undef;
+    my $Content = <$FH>;
+    closeOutput($FH, $Pid);
+    return $Content;
+}
+
+# Arguments:
+#   Filehandle for writing to the first process in conveyor.
+#   Filehandle for reading from the last process in conveyor.
+#   List of intermixed:
+#     a) arrayrefs consisting command lines;
+#     b) plain scalars each containing working directory for children
+#        to be created after it.
+#
+# Returns list of PIDs of processes created, in order to be waitpid()'ed.
+#
+# Example: openConveyor(FIRSTPROGINPUT, LASTPROGOUTPUT,
+#                       [ "/usr/bin/zgrep", "foo", "/var/tmp/bar.txt" ],
+#                       "/tmp",
+#                       [ "/usr/bin/gzip", "-o", $OutFile ]
+#                      );
+#
+sub openConveyor(**@) {
+    my $Last;
+    for (my $I = 2; $I <= $#_; $I++) {
+        # We need to know index of last command line given, so we have to run
+        # through arguments list twice.
+        $Last = $I if ref($_[$I]) eq 'ARRAY';
+    }
+    if (not defined $Last) {
+        printMsg("ERROR", "no commands given for openConveyor\n");
+        return ();
+    }
+
+    my @Pids;
+    my $Dir;        # directory handle, to avoid races
+    my $In;         # STDIN for each next child, updated on each loop
+    pipe($In, $_[0]) or
+        exitStatus("Error", "cannot create pipe: $!");
+
+    printMsg("DEBUG", "Running in conveyor:");
+    for (my $I = 2; $I <= $#_; $I++) {
+        if (ref($_[$I]) ne 'ARRAY') {
+            printMsg("DEBUG", "\tCHDIR: $_[$I]");
+            closedir $Dir if defined $Dir;
+            opendir($Dir, $_[$I]) or
+                exitStatus("Error", "cannot open directory $_[$I]: $!");
+            next;
+        }
+
+        printMsg("DEBUG", "\tCOMMAND: ".join(" ", @{$_[$I]}));
+
+        # Output filehandle will be used for this child, read one - for the
+        # next one (or as the read filehandle for the whole conveyor if
+        # this is the last one).
+        my $NewIn;
+        if ($I == $Last) {
+            # cannot always open and use $_[1]
+            pipe($_[1], $Out) or
+                exitStatus("Error", "cannot create pipe: $!");
+            $NewIn = $_[1];
+        } else {
+            pipe($NewIn, $Out) or
+                exitStatus("Error", "cannot create pipe: $!");
+        }
+
+        my $Pid = fork();
+        unless (defined $Pid) {
+            exitStatus("Error", "cannot fork: $!");
+        }
+
+        if ($Pid == 0)
+        { # child: chdir, reopen STDIN and STDOUT, exec
+            if (defined $Dir) {
+                chdir($Dir) or die "cannot chdir to $Dir: $!";
+                closedir $Dir;
+            }
+
+            # Safety measure, idea from IPC::Open3.
+            untie *STDIN;
+            untie *STDOUT;
+
+            open(STDIN,  "<&=".fileno($In)) or
+                die "cannot reopen stdin: $!";
+            open(STDOUT, ">&=".fileno($Out)) or
+                die "cannot reopen stdout: $!";
+            close $In;
+            close $Out;
+            close $_[0];
+            close $_[1];
+
+            exec @{$_[$I]};
+            die "exec failed: $!";
+        }
+
+        # parent: close/update file handles, loop
+        push(@Pids, $Pid);
+        close $Out;
+        close $In;
+        $In = $NewIn;
+    }
+    closedir $Dir if defined $Dir;
+    return @Pids;
+}
+
+# Arguments:
+#   Conveyor input filehandle.
+#   Conveyor output filehandle.
+#   List of PIDs, as returned by openConveyor().
+# Returns: first error status code (non-zero) in conveyor, or 0 otherwise (OK).
+sub closeConveyor(**@) {
+    my $Err = 0;
+    for my $I (2 .. $#_) {
+        waitpid($_[$I], 0);
+        # save the first error we've seen
+        $Err = ($? >> 8) unless $Err;
+    }
+
+    # Close only after waiting to not ruin child processes before they
+    # finish their work.
+    close $_[0];
+    close $_[1];
+    return $Err;
+}
+
+#my @Pids = openConveyor(TESTIN, TESTOUT,
+#    [ "/bin/echo", "TEST 1" ],
+#    [ "/bin/echo", "TEST 222" ],
+#    [ "/usr/bin/sed", "s/1/1 and 2/" ],
+#    [ "/usr/bin/sed", "s/2/2 and 3/" ]
+#);
+#print STDERR "STARTED!\n";
+#print STDERR "CLOSING WRITER\n";
+#close TESTIN;
+#print STDERR "READING...\n";
+#while(<TESTOUT>) {
+#	print STDERR $_;
+#}
+#print STDERR "STOPPING...\n";
+#close TESTOUT;
+#waitpid($_, 0) foreach @Pids;
+#die "STOP!";
+
 sub search_Tools($)
 {
     my $Name = $_[0];
@@ -1809,7 +2009,8 @@ sub get_CmdPath_Default_I($)
     my $Name = $_[0];
     if($Name=~/find/)
     { # special case: search for "find" utility
-        if(`find \"$TMP_DIR\" -maxdepth 0 2>\"$TMP_DIR/null\"`) {
+        my $Output = readOutput("find", $TMP_DIR, "-maxdepth", "0");
+        if ($? >> 8 == 0 and $Output =~ /^\Q${TMP_DIR}\E[\n]?$/) {
             return "find";
         }
     }
@@ -2155,7 +2356,7 @@ sub readTUDump($)
 {
     my $DumpPath = $_[0];
     
-    open(TU_DUMP, $DumpPath);
+    open(TU_DUMP, "<", $DumpPath);
     local $/ = undef;
     my $Content = <TU_DUMP>;
     close(TU_DUMP);
@@ -7554,14 +7755,15 @@ sub checkCTags($)
         }
     }
     
-    my $Out = $TMP_DIR."/ctags.txt";
-    system("$CTags --c-kinds=pxn -f \"$Out\" \"$Path\" 2>\"$TMP_DIR/null\"");
+    my $Pid = openOutput(CTAGS, undef, $CTags, "--c-kinds=pxn", "-f", "-", $Path) or
+        exitStatus("Error", "can't execute \"${CTags}\": $!");
     if($Debug) {
-        copy($Out, $DEBUG_PATH{$Version}."/ctags.txt");
+        open(CTAGSD, ">", $DEBUG_PATH{$Version}."/ctags.txt");
+        *CTAGSD->autoflush(1);
     }
-    open(CTAGS, "<", $Out);
     while(my $Line = <CTAGS>)
     {
+        print CTAGSD $Line if $Debug;
         chomp($Line);
         my ($Name, $Header, $Def, $Type, $Scpe) = split(/\t/, $Line);
         if(defined $Intrinsic_Keywords{$Name})
@@ -7597,7 +7799,8 @@ sub checkCTags($)
             }
         }
     }
-    close(CTAGS);
+    close(CTAGSD) if $Debug;
+    closeOutput(CTAGS, $Pid);
 }
 
 sub getDump()
@@ -8017,10 +8220,20 @@ sub cmd_file($)
 {
     my $Path = $_[0];
     return "" if(not $Path or not -e $Path);
-    if(my $CmdPath = get_CmdPath("file")) {
-        return `$CmdPath -b \"$Path\"`;
+    my $CmdPath = get_CmdPath("file");
+    if ($CmdPath eq "") {
+        return "";
     }
-    return "";
+
+    my $Pid = openOutput(my $FH, undef, $CmdPath, "-b", $Path);
+    if (!$Pid) {
+        printMsg("ERROR", "found but can't execute \"${CmdPath}\": $!\n");
+        return "";
+    }
+    my $res = <$FH>;    # we need only the first one anyway
+    closeOutput($FH, $Pid);
+    chomp $res;
+    return $res;
 }
 
 sub getIncString($$)
@@ -8101,20 +8314,37 @@ sub callPreprocessor($$$)
     return $Out;
 }
 
+# Note: $Name should not use any wildcard characters other
+# than '*' and '?' to be portable for Windows.
 sub cmd_find($;$$$$)
 { # native "find" is much faster than File::Find (~6x)
   # also the File::Find doesn't support --maxdepth N option
   # so using the cross-platform wrapper for the native one
-    my ($Path, $Type, $Name, $MaxDepth, $UseRegex) = @_;
+    my ($Path, $Type, $Name, $MaxDepth, $Regex) = @_;
     return () if(not $Path or not -e $Path);
+
+    my $RegComp;
+    if($Regex)
+    { # compile only, to be used later
+        $RegComp = qr/${Regex}/;
+    }
+
     if($OSgroup eq "windows")
     {
+        # Avoid user options to affect output.
+        delete $ENV{"DIRCMD"} if exists $ENV{"DIRCMD"};
+
         my $DirCmd = get_CmdPath("dir");
         if(not $DirCmd) {
             exitStatus("Not_Found", "can't find \"dir\" command");
         }
+        $Path =~ s/[\\]+\Z//;
         $Path = get_abs_path($Path);
         $Path = path_format($Path, $OSgroup);
+        if($Name) {
+            $Path = join_P($Path, $Name);
+        }
+        # We have to call shell here because DIR could be built-in command only
         my $Cmd = $DirCmd." \"$Path\" /B /O";
         if($MaxDepth!=1) {
             $Cmd .= " /S";
@@ -8125,7 +8355,16 @@ sub cmd_find($;$$$$)
         elsif($Type eq "f") {
             $Cmd .= " /A-D";
         }
-        my @Files = split(/\n/, `$Cmd 2>\"$TMP_DIR/null\"`);
+
+        my $Pid = openOutput(DIRPROG, undef, $Cmd) or
+            exitStatus("Error", "can't execute \"${DirCmd}\" command: $!");
+        while(<DIRPROG>) {
+            chomp;
+            next if defined($RegComp) && !/$RegComp/;
+            push(@Files, $_);
+        }
+        closeOutput(DIRPROG, $Pid);
+
         if($Name)
         { # FIXME: how to search file names in MS shell?
             if(not $UseRegex) {
@@ -8162,25 +8401,28 @@ sub cmd_find($;$$$$)
         { # for directories that are symlinks
             $Path.="/";
         }
-        my $Cmd = $FindCmd." \"$Path\"";
+        my @Cmd = ($FindCmd, $Path);
         if($MaxDepth) {
-            $Cmd .= " -maxdepth $MaxDepth";
+            push(@Cmd, "-maxdepth", $MaxDepth);
         }
         if($Type) {
-            $Cmd .= " -type $Type";
+            push(@Cmd, "-type", $Type);
         }
-        if($Name and not $UseRegex)
+        if($Name)
         { # wildcards
-            $Cmd .= " -name \"$Name\"";
+            push(@Cmd, "-name", $Name);
         }
-        my $Res = `$Cmd 2>\"$TMP_DIR/null\"`;
-        if($?) {
-            printMsg("ERROR", "problem with \'find\' utility ($?): $!");
+
+        my @Files;
+        my $Pid = openOutput(FINDPROG, undef, @Cmd) or
+            printMsg("ERROR", "can't execute \"${FindCmd}\": $!");
+        while(<FINDPROG>) {
+            chomp;
+            next if defined($RegComp) && !/$RegComp/;
+            push(@Files, $_);
         }
-        my @Files = split(/\n/, $Res);
-        if($Name and $UseRegex)
-        { # regex
-            @Files = grep { /\A$Name\Z/ } @Files;
+        if(my $Err = closeOutput(FINDPROG, $Pid)) {
+            printMsg("ERROR", "problem with \"find\" utility, it returned code $Err");
         }
         return @Files;
     }
@@ -8202,66 +8444,51 @@ sub unpackDump($)
         if(not $UnzipCmd) {
             exitStatus("Not_Found", "can't find \"unzip\" command");
         }
-        chdir($UnpackDir);
-        system("$UnzipCmd \"$Path\" >\"$TMP_DIR/null\"");
-        if($?) {
-            exitStatus("Error", "can't extract \'$Path\' ($?): $!");
+
+        my $Pid = openOutput(UNZIPOUT, $UnpackDir, $UnzipCmd, $Path) or
+            exitStatus("Error", "can't extract \'$Path\'");
+
+        my $ExFile;
+        while (<UNZIPOUT>) {
+            next if defined $ExFile;
+            chomp;
+            /^[\s]*inflating: (.*)$/ and $ExFile = $1;
         }
-        chdir($ORIG_DIR);
-        my @Contents = cmd_find($UnpackDir, "f");
-        if(not @Contents) {
+        my $Err = closeOutput(UNZIPOUT, $Pid);
+        if(not defined $ExFile or $Err) {
             exitStatus("Error", "can't extract \'$Path\'");
         }
-        return $Contents[0];
+
+        return join_P($UnpackDir, $ExFile);
     }
     elsif($FileName=~s/\Q.tar.gz\E\Z//g)
     { # *.tar.gz
-        if($OSgroup eq "windows")
-        { # -xvzf option is not implemented in tar.exe (2003)
-          # use "gzip.exe -k -d -f" + "tar.exe -xvf" instead
-            my $TarCmd = get_CmdPath("tar");
-            if(not $TarCmd) {
-                exitStatus("Not_Found", "can't find \"tar\" command");
-            }
-            my $GzipCmd = get_CmdPath("gzip");
-            if(not $GzipCmd) {
-                exitStatus("Not_Found", "can't find \"gzip\" command");
-            }
-            chdir($UnpackDir);
-            system("$GzipCmd -k -d -f \"$Path\""); # keep input files (-k)
-            if($?) {
-                exitStatus("Error", "can't extract \'$Path\'");
-            }
-            system("$TarCmd -xvf \"$Dir\\$FileName.tar\" >\"$TMP_DIR/null\"");
-            if($?) {
-                exitStatus("Error", "can't extract \'$Path\' ($?): $!");
-            }
-            chdir($ORIG_DIR);
-            unlink($Dir."/".$FileName.".tar");
-            my @Contents = cmd_find($UnpackDir, "f");
-            if(not @Contents) {
-                exitStatus("Error", "can't extract \'$Path\'");
-            }
-            return $Contents[0];
+      # -z option is not implemented in tar.exe (2003)
+      # pipe from gzip.exe to tar.exe instead.
+        my $TarCmd = (get_CmdPath("tar")) or
+            exitStatus("Not_Found", "can't find \"tar\" command");
+        my $GzipCmd = (get_CmdPath("gzip")) or
+            exitStatus("Not_Found", "can't find \"gzip\" command");
+
+        my ($TarIn, $TarOut);
+        my @Pids = openConveyor($TarIn, $TarOut,
+                  [ $GzipCmd, "-cd", $Path ],
+                  $UnpackDir,
+                  [ $TarCmd, "-xvf", "-" ]) or
+            exitStatus("Error", "can't pack the ABI dump: $!");
+
+        my $ExFile;
+        while (<$TarOut>) {
+            next if defined $ExFile;
+            chomp;
+            $ExFile = $_;
         }
-        else
-        { # Unix, Mac
-            my $TarCmd = get_CmdPath("tar");
-            if(not $TarCmd) {
-                exitStatus("Not_Found", "can't find \"tar\" command");
-            }
-            chdir($UnpackDir);
-            system("$TarCmd -xvzf \"$Path\" >\"$TMP_DIR/null\"");
-            if($?) {
-                exitStatus("Error", "can't extract \'$Path\' ($?): $!");
-            }
-            chdir($ORIG_DIR);
-            my @Contents = cmd_find($UnpackDir, "f");
-            if(not @Contents) {
-                exitStatus("Error", "can't extract \'$Path\'");
-            }
-            return $Contents[0];
+        my $Err = closeConveyor($TarIn, $TarOut, @Pids);
+        if(not defined $ExFile or $Err) {
+            exitStatus("Error", "can't extract \'$Path\'");
         }
+
+        return join_P($UnpackDir, $ExFile);
     }
 }
 
@@ -8278,45 +8505,41 @@ sub createArchive($$)
     my ($From, $Name) = separate_path($Path);
     if($OSgroup eq "windows")
     { # *.zip
-        my $ZipCmd = get_CmdPath("zip");
-        if(not $ZipCmd) {
-            exitStatus("Not_Found", "can't find \"zip\"");
-        }
+        my $ZipCmd = get_CmdPath("zip") or
+            exitStatus("Not_Found", "can't find \"zip\" command");
         my $Pkg = $To."/".$Name.".zip";
         unlink($Pkg);
-        chdir($To);
-        system("$ZipCmd -j \"$Name.zip\" \"$Path\" >\"$TMP_DIR/null\"");
-        if($?)
+        system($ZipCmd, "-j", $Pkg, $Path);
+        unlink($Path);
+        if($? >> 8)
         { # cannot allocate memory (or other problems with "zip")
-            unlink($Path);
-            exitStatus("Error", "can't pack the ABI dump: ".$!);
+            unlink($Pkg);
+            exitStatus("Error", "can't pack the ABI dump: ".($? >> 8));
         }
-        chdir($ORIG_DIR);
-        unlink($Path);
         return $Pkg;
     }
     else
     { # *.tar.gz
-        my $TarCmd = get_CmdPath("tar");
-        if(not $TarCmd) {
-            exitStatus("Not_Found", "can't find \"tar\"");
-        }
-        my $GzipCmd = get_CmdPath("gzip");
-        if(not $GzipCmd) {
-            exitStatus("Not_Found", "can't find \"gzip\"");
-        }
         my $Pkg = abs_path($To)."/".$Name.".tar.gz";
+        my $TarCmd = (get_CmdPath("tar")) or
+            exitStatus("Not_Found", "can't find \"tar\" command");
+        my $GzipCmd = (get_CmdPath("gzip")) or
+            exitStatus("Not_Found", "can't find \"gzip\" command");
+
+        my ($TarIn, $TarOut);
         unlink($Pkg);
-        chdir($From);
-        system($TarCmd, "-czf", $Pkg, $Name);
-        if($?)
+        my @Pids = openConveyor($TarIn, $TarOut,
+                                $From,
+                                [ $TarCmd, "-cf", "-", $Name ],
+                                [ $GzipCmd, "-o", $Pkg ]) or
+            exitStatus("Error", "can't pack the ABI dump: $!");
+
+        if(my $Err = closeConveyor($TarIn, $TarOut, @Pids))
         { # cannot allocate memory (or other problems with "tar")
-            unlink($Path);
-            exitStatus("Error", "can't pack the ABI dump: ".$!);
+            unlink($Pkg);
+            exitStatus("Error", "can't pack the ABI dump, one of the commands returned code: $Err");
         }
-        chdir($ORIG_DIR);
-        unlink($Path);
-        return $To."/".$Name.".tar.gz";
+        return $Pkg;
     }
 }
 
@@ -13925,20 +14148,27 @@ sub writeFile($$)
     close(FILE);
 }
 
-sub readFile($)
+sub readHandle($)
 {
-    my $Path = $_[0];
-    return "" if(not $Path or not -f $Path);
-    open(FILE, $Path);
+    my $FH = $_[0];
     local $/ = undef;
-    my $Content = <FILE>;
-    close(FILE);
+    my $Content = <$FH>;
+    close($FH);
     if($Path!~/\.(tu|class|abi)\Z/) {
         $Content=~s/\r/\n/g;
     }
     return $Content;
 }
 
+sub readFile($)
+{
+    my $Path = $_[0];
+    return "" if(not $Path or not -f $Path);
+    my $h;
+    open($h, "<", $Path);
+    return readHandle($h);
+}
+
 sub get_filename($)
 { # much faster than basename() from File::Basename module
     if(defined $Cache{"get_filename"}{$_[0]}) {
@@ -15993,18 +16223,18 @@ sub writeReport($$)
 sub openReport($)
 {
     my $Path = $_[0];
-    my $Cmd = "";
+    my @Cmd;
     if($Browse)
     { # user-defined browser
-        $Cmd = $Browse." \"$Path\"";
+        @Cmd = ($Browse, $Path);
     }
-    if(not $Cmd)
+    if(not @Cmd)
     { # default browser
         if($OSgroup eq "macos") {
-            $Cmd = "open \"$Path\"";
+            @Cmd = ("open", $Path);
         }
         elsif($OSgroup eq "windows") {
-            $Cmd = "start ".path_format($Path, $OSgroup);
+            @Cmd = ("start", path_format($Path, $OSgroup));
         }
         else
         { # linux, freebsd, solaris
@@ -16021,29 +16251,20 @@ sub openReport($)
             {
                 if($Br = get_CmdPath($Br))
                 {
-                    $Cmd = $Br." \"$Path\"";
+                    @Cmd = ($Br, $Path);
                     last;
                 }
             }
         }
     }
-    if($Cmd)
-    {
-        if($Debug) {
-            printMsg("INFO", "running $Cmd");
-        }
-        if($OSgroup ne "windows"
-        and $OSgroup ne "macos")
-        {
-            if($Cmd!~/lynx|links/) {
-                $Cmd .= "  >\"$TMP_DIR/null\" 2>&1 &";
-            }
-        }
-        system($Cmd);
-    }
-    else {
+    if(not @Cmd) {
         printMsg("ERROR", "cannot open report in browser");
     }
+
+    if($Debug) {
+        printMsg("INFO", "running ".join(" ", @Cmd));
+    }
+    system(@Cmd);
 }
 
 sub getReport($)
@@ -16993,14 +17214,15 @@ sub readSymbols_App($)
         if(not $NM) {
             exitStatus("Not_Found", "can't find \"nm\"");
         }
-        open(APP, "$NM -g \"$Path\" 2>\"$TMP_DIR/null\" |");
+        my $Pid = openOutput(APP, undef, $NM, "-g", $Path) or
+            exitStatus("Error", "can't execute \"${NM}\": $!");
         while(<APP>)
         {
             if(/ U _([\w\$]+)\s*\Z/) {
                 push(@Imported, $1);
             }
         }
-        close(APP);
+        closeOutput(APP, $Pid);
     }
     elsif($OSgroup eq "windows")
     {
@@ -17008,22 +17230,22 @@ sub readSymbols_App($)
         if(not $DumpBinCmd) {
             exitStatus("Not_Found", "can't find \"dumpbin.exe\"");
         }
-        open(APP, "$DumpBinCmd /IMPORTS \"$Path\" 2>\"$TMP_DIR/null\" |");
+        my $Pid = openOutput(APP, undef, $DumpBinCmd, "/IMPORTS", $Path) or
+            exitStatus("Error", "can't execute \"${DumpBinCmd}\": $!");
         while(<APP>)
         {
             if(/\s*\w+\s+\w+\s+\w+\s+([\w\?\@]+)\s*/) {
                 push(@Imported, $1);
             }
         }
-        close(APP);
+        closeOutput(APP, $Pid);
     }
     else
     {
-        my $ReadelfCmd = get_CmdPath("readelf");
-        if(not $ReadelfCmd) {
+        my $ReadelfCmd = get_CmdPath("readelf") or
             exitStatus("Not_Found", "can't find \"readelf\"");
-        }
-        open(APP, "$ReadelfCmd -WhlSsdA \"$Path\" 2>\"$TMP_DIR/null\" |");
+        my $Pid = openOutput(APP, undef, $ReadelfCmd, "-WhlSsdA", $Path) or
+            exitStatus("Error", "can't execute \"${ReadelfCmd}\": $!");
         my $symtab = undef; # indicates that we are processing 'symtab' section of 'readelf' output
         while(<APP>)
         {
@@ -17047,7 +17269,7 @@ sub readSymbols_App($)
                 }
             }
         }
-        close(APP);
+        closeOutput(APP, $Pid);
     }
     return @Imported;
 }
@@ -17222,23 +17444,19 @@ sub readSymbols_Lib($$$$$$)
     }
     if($OStarget eq "macos")
     { # Mac OS X: *.dylib, *.a
-        my $NM = get_CmdPath("nm");
-        if(not $NM) {
+        my $NM = get_CmdPath("nm") or
             exitStatus("Not_Found", "can't find \"nm\"");
-        }
-        $NM .= " -g \"$Lib_Path\" 2>\"$TMP_DIR/null\"";
+        my $Pid = openOutput(LIB, undef, $NM, "-g", $Lib_Path) or
+            exitStatus("Error", "can't execute \"${NM}\": $!\n");
         if($DebugPath)
         { # debug mode
           # write to file
-            system($NM." >\"$DebugPath\"");
-            open(LIB, $DebugPath);
+            open(LIBD, ">", $DebugPath);
+            *LIBD->autoflush(1);
         }
-        else
-        { # write to pipe
-            open(LIB, $NM." |");
-        }
         while(<LIB>)
         {
+            print LIBD if $DebugPath;
             if($CheckUndefined)
             {
                 if(not $IsNeededLib)
@@ -17279,19 +17497,17 @@ sub readSymbols_Lib($$$$$$)
                 }
             }
         }
-        close(LIB);
+        close(LIBD) if $DebugPath;
+        closeOutput(LIB, $Pid);
         
         if($Deps)
         {
             if($LIB_TYPE eq "dynamic")
             { # dependencies
-                
-                my $OtoolCmd = get_CmdPath("otool");
-                if(not $OtoolCmd) {
-                    exitStatus("Not_Found", "can't find \"otool\"");
-                }
-                
-                open(LIB, "$OtoolCmd -L \"$Lib_Path\" 2>\"$TMP_DIR/null\" |");
+                my $OtoolCmd = get_CmdPath("otool") or
+                    exitStatus("Not_Found", "can't find \"otool\"\n");
+                $Pid = openOutput(LIB, undef, $OtoolCmd, "-L", $Lib_Path) or
+                    exitStatus("Error", "can't execute \"${OtoolCmd}\": $!\n");
                 while(<LIB>)
                 {
                     if(/\s*([\/\\].+\.$LIB_EXT)\s*/
@@ -17299,31 +17515,28 @@ sub readSymbols_Lib($$$$$$)
                         $NeededLib{$1} = 1;
                     }
                 }
-                close(LIB);
+                closeOutput(LIB, $Pid);
             }
         }
     }
     elsif($OStarget eq "windows")
     { # Windows *.dll, *.lib
-        my $DumpBinCmd = get_CmdPath("dumpbin");
-        if(not $DumpBinCmd) {
+        my $DumpBinCmd = get_CmdPath("dumpbin") or
             exitStatus("Not_Found", "can't find \"dumpbin\"");
-        }
-        $DumpBinCmd .= " /EXPORTS \"".$Lib_Path."\" 2>$TMP_DIR/null";
+        my $Pid = openOutput(LIB, undef, $DumpBinCmd, "/EXPORTS", $Lib_Path) or
+            exitStatus("Error", "can't exectute \"${DumpBinCmd}\": $!");
         if($DebugPath)
         { # debug mode
           # write to file
-            system($DumpBinCmd." >\"$DebugPath\"");
-            open(LIB, $DebugPath);
+            open(LIBD, ">", $DebugPath);
+            *LIBD->autoflush(1);
         }
-        else
-        { # write to pipe
-            open(LIB, $DumpBinCmd." |");
-        }
         while(<LIB>)
         { # 1197 4AC 0000A620 SetThreadStackGuarantee
           # 1198 4AD          SetThreadToken (forwarded to ...)
           # 3368 _o2i_ECPublicKey
+            print LIBD if $DebugPath;
+
             if(/\A\s*\d+\s+[a-f\d]+\s+[a-f\d]+\s+([\w\?\@]+)\s*\Z/i
             or /\A\s*\d+\s+[a-f\d]+\s+([\w\?\@]+)\s*\(\s*forwarded\s+/
             or /\A\s*\d+\s+_([\w\?\@]+)\s*\Z/)
@@ -17354,44 +17567,45 @@ sub readSymbols_Lib($$$$$$)
                 }
             }
         }
-        close(LIB);
+        closeOutput(LIB, $Pid);
         if($Deps)
         {
             if($LIB_TYPE eq "dynamic")
             { # dependencies
-                open(LIB, "$DumpBinCmd /DEPENDENTS \"$Lib_Path\" 2>\"$TMP_DIR/null\" |");
+                $Pid = openOutput(LIB, undef, $DumpBinCmd, "/DEPENDENTS", $Lib_Path) or
+                    exitStatus("Error", "can't exectute \"${DumpBinCmd}\": $!");
                 while(<LIB>)
                 {
+                    print LIBD if $DebugPath;
                     if(/\s*([^\s]+?\.$LIB_EXT)\s*/i
                     and $1 ne $Lib_Path) {
                         $NeededLib{path_format($1, $OSgroup)} = 1;
                     }
                 }
-                close(LIB);
+                closeOutput(LIB, $Pid);
             }
         }
+        close(LIBD) if $DebugPath;
     }
     else
     { # Unix; *.so, *.a
       # Symbian: *.dso, *.lib
-        my $ReadelfCmd = get_CmdPath("readelf");
-        if(not $ReadelfCmd) {
+        my $ReadelfCmd = get_CmdPath("readelf") or
             exitStatus("Not_Found", "can't find \"readelf\"");
-        }
-        $ReadelfCmd .= " -WhlSsdA \"$Lib_Path\" 2>\"$TMP_DIR/null\"";
+
+        my $Pid = openOutput(LIB, undef, $ReadelfCmd, "-WhlSsdA", $Lib_Path) or
+            exitStatus("Error", "can't execute \"${ReadelfCmd}\": $!");
         if($DebugPath)
         { # debug mode
           # write to file
-            system($ReadelfCmd." >\"$DebugPath\"");
-            open(LIB, $DebugPath);
+            open(LIBD, ">", $DebugPath);
+            *LIBD->autoflush(1);
         }
-        else
-        { # write to pipe
-            open(LIB, $ReadelfCmd." |");
-        }
+
         my $symtab = undef; # indicates that we are processing 'symtab' section of 'readelf' output
         while(<LIB>)
         {
+            print LIBD if $DebugPath;
             if($LIB_TYPE eq "dynamic")
             { # dynamic library specifics
                 if(defined $symtab)
@@ -17478,8 +17692,10 @@ sub readSymbols_Lib($$$$$$)
                 }
             }
         }
-        close(LIB);
+        close(LIBD) if $DebugPath;
+        closeOutput(LIB, $Pid);
     }
+
     if($Vers)
     {
         if(not $IsNeededLib and $LIB_EXT eq "so")
@@ -17511,6 +17727,7 @@ sub readSymbols_Lib($$$$$$)
             }
         }
     }
+
     if($Deps)
     {
         foreach my $DyLib (sort keys(%NeededLib))
@@ -17557,7 +17774,7 @@ sub detectSystemHeaders()
         next if(not -d $DevelPath);
         # search for all header files in the /usr/include
         # with or without extension (ncurses.h, QtCore, ...)
-        @SysHeaders = (@SysHeaders, cmd_find($DevelPath,"f"));
+        push(@SysHeaders, cmd_find($DevelPath,"f"));
         foreach my $Link (cmd_find($DevelPath,"l"))
         { # add symbolic links
             if(-f $Link) {
@@ -17568,13 +17785,12 @@ sub detectSystemHeaders()
     foreach my $DevelPath (@{$SystemPaths{"lib"}})
     { # search for config headers in the /usr/lib
         next if(not -d $DevelPath);
-        foreach (cmd_find($DevelPath,"f"))
+        my $re = qr/\.h(pp|xx)?\Z|\/include\//o;
+        foreach (cmd_find($DevelPath,"f",undef,undef,$re))
         {
             if(not /\/(gcc|jvm|syslinux|kbd|parrot|xemacs)/)
             {
-                if(/\.h\Z|\/include\//) {
-                    push(@SysHeaders, $_);
-                }
+                push(@SysHeaders, $_);
             }
         }
     }
@@ -17878,13 +18094,12 @@ sub read_ABI_Dump($$)
 {
     my ($LibVersion, $Path) = @_;
     return if(not $LibVersion or not -e $Path);
-    my $FilePath = "";
     if(isDump_U($Path))
     { # input *.abi
         $FilePath = $Path;
     }
     else
-    { # input *.abi.tar.gz
+    { # input *.tar.gz or *.zip
         $FilePath = unpackDump($Path);
         if(not isDump_U($FilePath)) {
             exitStatus("Invalid_Dump", "specified ABI dump \'$Path\' is not valid, try to recreate it");
@@ -17901,7 +18116,7 @@ sub read_ABI_Dump($$)
     }
     else
     { # Perl Data::Dumper format (default)
-        open(DUMP, $FilePath);
+        open(DUMP, "<", $FilePath);
         local $/ = undef;
         my $Content = <DUMP>;
         close(DUMP);
@@ -18377,7 +18592,7 @@ sub find_libs($$$)
 {
     my ($Path, $Type, $MaxDepth) = @_;
     # FIXME: correct the search pattern
-    return cmd_find($Path, $Type, ".*\\.".$LIB_EXT."[0-9.]*", $MaxDepth, 1);
+    return cmd_find($Path, $Type, "*.$LIBEXT*", $MaxDepth, ".*\\.".$LIB_EXT."[0-9.]*");
 }
 
 sub createDescriptor($$)
@@ -18718,7 +18933,7 @@ sub detect_default_paths($)
         { # try to find gcc-X.Y
             foreach my $Path (@{$SystemPaths{"bin"}})
             {
-                if(my @GCCs = cmd_find($Path, "", ".*/gcc-[0-9.]*", 1, 1))
+                if(my @GCCs = cmd_find($Path, "", "gcc-*", 1, ".*/gcc-[0-9.]*"))
                 { # select the latest version
                     @GCCs = sort {$b cmp $a} @GCCs;
                     if(check_gcc($GCCs[0], "3"))
@@ -19269,7 +19484,11 @@ sub dump_sorting($)
 sub printMsg($$)
 {
     my ($Type, $Msg) = @_;
-    if($Type!~/\AINFO/) {
+    if($Type=~/\ADEBUG/) {
+        return unless $Debug;
+        $Msg = "[".$$."] ".$Msg;
+    }
+   if($Type!~/\AINFO/) {
         $Msg = $Type.": ".$Msg;
     }
     if($Type!~/_C\Z/) {
@@ -19553,7 +19772,7 @@ sub create_ABI_Dump()
     }
     initLogging(1);
     detect_default_paths("inc|lib|bin|gcc"); # complete analysis
-    
+
     # check the archive utilities
     if($OSgroup eq "windows")
     { # using zip
@@ -19573,7 +19792,7 @@ sub create_ABI_Dump()
             exitStatus("Not_Found", "can't find \"gzip\"");
         }
     }
-    
+
     if(not $Descriptor{1}{"Dump"})
     {
         if(not $CheckHeadersOnly) {
@@ -19711,8 +19930,8 @@ sub create_ABI_Dump()
         
         mkpath($DDir);
         
-        open(DUMP, ">", $DPath) || die ("can't open file \'$DPath\': $!\n");
-        print DUMP $ABI_DUMP;
+        open(DUMP, ">", $DPath) or die ("can't open file \'$DPath\': $!\n");
+        print DUMP $ABI_DUMP or die ("can't write file \'$DPath\': $!\n");
         close(DUMP);
         
         if(not -s $DPath) {
@@ -19753,11 +19972,11 @@ sub quickEmptyReports()
             
             local $/ = undef;
             
-            open(DUMP1, $FilePath1);
+            open(DUMP1, "<", $FilePath1);
             my $Content1 = <DUMP1>;
             close(DUMP1);
             
-            open(DUMP2, $FilePath2);
+            open(DUMP2, "<", $FilePath2);
             my $Content2 = <DUMP2>;
             close(DUMP2);
             
